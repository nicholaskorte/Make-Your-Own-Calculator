#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "structs.h"

int add(int x, int y){
    return x + y;
}
int sub(int x, int y){
    return x - y;
}
int mult(int x, int y){
    return x * y;
}
int divi(int x, int y){
    return x / y;
}
int mod(int x, int y){
    return x % y;
}

//functions for qsort
int compare_nums_asc(const void* number1, const void* number2)
{
    int *one = *(int*)number1;
    int *two = *(int*)number2;
    return -1 * (two - one);

int compare_nums_desc(const void* number1, const void* number2)
    {
        int *one = *(int*)number1;
        int *two = *(int*)number2;
        return -1 * (one - two);
    }

int compare_names(const void *a, const void *b)
{
    char** sa = (char**)a;
    char** sb = (char**)b;
    return strcmp(*sa, *sb);
}


int compare_names_desc(const void* a, const void* b)
{
    return compare_names(b, a);
}

//if you are going to use this function make sure to use the library containing all of my structs. you need the struct called rectangle
int compare_areas(const void *a, const void *b)
{
    rectangle* ra = (rectangle*)a;
    rectangle* rb = (rectangle*)b;
    int area_a = (ra->width * ra->height);
    int area_b = (rb->width * rb->height);
    return area_a - area_b;
}

int compare_areas_desc(const void* a, const void* b)
{
    return compare_areas(b, a);
}

int arr_size(const void* x)
{
    int length = sizeof(x) / sizeof(x[0]);
    return length;
}

void create_linked_list(const void* arr)
{
    int length = arr_size(arr);
    int i;
    for(i = 0; i < length; i++){
    arr[i]->next = &(arr[i++]);
    }
}





